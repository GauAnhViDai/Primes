May 27, 2012
Kim Walisch, <kim.walisch@gmail.com>
http://primesieve.googlecode.com

C++11
-----

I may implement the following TODOs in a few years when C++11 is
widely supported.

1. Use smart pointers (std::unique_ptr) for dynamic memory allocation.
2. Use auto and decltype where appropriate.
3. Use <cstdint> instead of <stdint.h>.
4. Use nullptr instead of NULL (remove <cstdlib> header).

OpenMP
------

1. ParallelPrimeSieve.cpp is currently not exception safe when >= 2
   threads are used due to lack of C++ exception support in OpenMP 3.1
   (May 2012), OpenMP 4 may support C++ exceptions.
2. Once OpenMP supports array reduction I should use it in
   ParallelPrimeSieve.cpp.

Possible future optimizations
-----------------------------
1. Once CPUs have >= 4 ALUs per physical core unrolling the main
   sieving loop 4 times (currently 2 times) in EratBig.cpp and
   EratMedium.cpp might be faster.
2. Prime number generation (not counting) can be sped up by about 10
   percent using the 64-bit BSF instruction (Assembly) instead of the
   De Bruijn bitscan in SieveOfEratosthenes-inline.h.
