May 27, 2011
Kim Walisch, <kim.walisch@gmail.com>
http://primesieve.googlecode.com

About
=====

This file contains various source code examples that show how to use
PrimeSieve and ParallelPrimeSieve objects. You may also want to have a
look at ../soe/PrimeSieve.h for the API and ../soe/PrimeSieve.cpp for
a brief description of each member function.

Examples
========

  1. Generate prime numbers
  2. Generate prime numbers (OOP)
  3. Count prime numbers
  4. Count prime numbers in parallel
  5. Count twin primes in parallel
  6. Print prime triplets
  7. Set the sieve size

/****************************************************************************/
// 1. Generate prime numbers
//    myPrimes(uint64_t) will be called back for each prime up to 1000

#include "soe/PrimeSieve.h"
#include <stdint.h>

void myPrimes(uint64_t prime) {
  // ...
}

int main() {
  PrimeSieve ps;
  ps.generatePrimes(2, 1000, myPrimes);
  return 0;
}

/****************************************************************************/
// 2. Generate prime numbers (OOP)
//    MyClass::doIt() generates the prime numbers up to 1000 and
//    stores them into the private primes_ variable

#include "soe/PrimeSieve.h"
#include <stdint.h>
#include <vector>

class MyClass {
public:
  void doIt() {
    PrimeSieve ps;
    ps.generatePrimes(2, 1000, myPrimes, (void*) this);
  }
private:
  std::vector<uint64_t> primes_;
  static void myPrimes(uint64_t prime, void* myObj) {
    ((MyClass*) myObj)->primes_.push_back(prime);
  }
};

/****************************************************************************/
// 3. Count prime numbers
//    Count the prime numbers up to 1000 (single-threaded)

#include "soe/PrimeSieve.h"
#include <stdint.h>

int main() {
  PrimeSieve ps;
  uint64_t primeCount = ps.getPrimeCount(2, 1000);
  return 0;
}

/****************************************************************************/
// 4. Count prime numbers in parallel
//    Count the prime numbers up to 10^9 in parallel using 4 threads

#include "soe/ParallelPrimeSieve.h"
#include <stdint.h>

int main() {
  ParallelPrimeSieve pps;
  pps.setNumThreads(4);
  uint64_t primeCount = pps.getPrimeCount(2, (int) 1E9);
  return 0;
}

/****************************************************************************/
// 5. Count twin primes in parallel
//    Count the twin primes between 10^11 and 2*10^11 in parallel
//    using all available threads (logical CPU cores)

#include "soe/ParallelPrimeSieve.h"
#include <stdint.h>

int main() {
  ParallelPrimeSieve pps;
  pps.setStartNumber((uint64_t) 1E11);
  pps.setStopNumber(2*(uint64_t) 1E11);
  pps.setFlags(pps.COUNT_TWINS);
  pps.sieve();
  uint64_t twinCount = pps.getTwinCount();
  return 0;
}

/****************************************************************************/
// 6. Print prime triplets
//    Print the prime triplets up to 10^8 to std::cout

#include "soe/PrimeSieve.h"
#include <stdint.h>

int main() {
  PrimeSieve ps;
  ps.setStartNumber(0);
  ps.setStopNumber((int) 1E8);
  ps.setFlags(ps.PRINT_TRIPLETS);
  ps.sieve();
  return 0;
}

/****************************************************************************/
// 7. Set the sieve size
//    The best sieving performance is achieved with a sieve size that
//    matches the CPU's L1 cache size (usually 32 or 64 KB) when
//    sieving < 10^14 and a sieve size of the CPU's L2 cache size
//    (e.g. 512 KB) above
//    Default sieveSize = 64 KB

#include "soe/PrimeSieve.h"
#include <stdint.h>

int main() {
  PrimeSieve ps;
  // set the sieve size in KiloBytes
  ps.setSieveSize(512);
  uint64_t count = ps.getPrimeCount((uint64_t) 1E15, (uint64_t)(1E15+1E11));
  return 0;
}
