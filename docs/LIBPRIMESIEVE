February, 5 2012
Kim Walisch, <kim.walisch@gmail.com>
http://primesieve.googlecode.com

Contents
========

  1. About libprimesieve
  2. Build libprimesieve    (Unix-like OSes)
  3. Test libprimesieve     (Unix-like OSes)
  4. OpenMP multi-threading (Unix-like OSes)
  5. Build primesieve.lib   (Windows, MSVC++)
  6. Usage example          (Windows, MSVC++)
  7. OpenMP multi-threading (Windows, MSVC++)
  8. sum_primes.cpp

1. About libprimesieve
======================

  The easiest way to use primesieve in your C++ program is to build
  it as a static library and link it into your application, this
  causes no dependencies. On Unix-like operating systems (Linux, Mac
  OS X, ...) it is also possible to build primesieve as a shared
  library.

  The file USAGE_EXAMPLES contains commented source code examples that
  show how to use libprimesieve e.g. for prime number generation.

2. Build libprimesieve (Unix-like OSes)
=======================================

  Open a terminal and cd into the primesieve source code directory.
  The following make commands build libprimesieve using g++ and
  install it together with the primesieve header files to /usr/local
  (Mac OS X: /usr).

  static libprimesieve (DEFAULT)
  ------------------------------

  $ make lib
  $ sudo make install

  shared libprimesieve
  --------------------

  $ make lib SHARED=yes
  $ sudo make install

  Note: on traditional Unix systems (BSD, MINIX, ...) you might need
  to use gmake instead of make.

  ----------------------------------------------------
  ---------------- Makefile help menu ----------------
  ----------------------------------------------------
  make                                   Builds the primesieve console application using g++ (DEFAULT)"
  make CXX=compiler CXXFLAGS="options"   Specify a custom C++ compiler"
  make L1_DCACHE_SIZE=KB                 Specify the CPU's L1 data cache size (read INSTALL)"
  make check                             Tests the compiled primesieve binary"
  make clean                             Cleans the output directories (./bin, ./lib)"
  make lib                               Builds static libprimesieve.a to ./lib"
  make lib SHARED=yes                    Builds shared libprimesieve.(so|dylib) to ./lib"
  sudo make install                      Installs primesieve and libprimesieve (to /usr/local or /usr)"
  sudo make install PREFIX=path          Specify a custom installation path"
  sudo make uninstall                    Completely removes primesieve and libprimesieve"
  make help                              Prints this help menu"

3. Test libprimesieve (Unix-like OSes)
======================================

  The sum_primes.cpp program (see section 8.) can now be compiled by
  specifying libprimesieve (-lprimesieve flag) at the end of the
  linker command:

  $ g++ -o sum_primes sum_primes.cpp -lprimesieve
  $ ./sum_primes

4. OpenMP multi-threading (Unix-like OSes)
==========================================

  By default libprimesieve is built single-threaded, if you want to
  use multi-threaded ParallelPrimeSieve objects then you have to build
  libprimesieve using OpenMP 3.0 or later and you must also add the
  OpenMP flag in the linker step of your program e.g.:

  $ make lib CXXFLAGS="-O2 -fopenmp"
  $ sudo make install
  $ g++ my_program.cpp -lprimesieve -fopenmp

5. Build primesieve.lib (Windows, MSVC++)
=========================================

  Open a Visual Studio Command Prompt, cd into the primesieve source
  code directory and build primesieve as a static library using:

  > nmake -f Makefile.msvc lib

6. Test primesieve.lib (Windows, MSVC++)
========================================

  The sum_primes.cpp program (see section 8.) can now be compiled by
  specifying primesieve.lib to the linker:

  > cl /O2 /GL /EHsc /I"dist" sum_primes.cpp /link "dist\primesieve.lib"
  > sum_primes.exe

  Note: /I adds the path to the primesieve header files needed for
  compilation.

7. OpenMP multi-threading (Windows, MSVC++)
===========================================

  Note: since version 3.5 primesieve requires OpenMP 3.0 or later
  which is currently (February 2012) not supported by Microsoft Visual
  C++. You can either switch to primesieve-3.4-src.zip which builds
  with OpenMP using Microsoft Visual C++ >= 2005 or use an alternate
  compiler e.g. the Intel C++ Compiler or MinGW.

  By default primesieve.lib is built single-threaded, if you want to
  use multi-threaded ParallelPrimeSieve objects then you have to
  build primesieve.lib using OpenMP:

  > nmake -f Makefile.msvc lib CXXFLAGS="/O2 /openmp /EHsc"

8. sum_primes.cpp
=================

  #include <primesieve/soe/PrimeSieve.h>
  #include <iostream>

  unsigned int sum = 0;
  void sumPrimes(unsigned int prime) {
    sum += prime;
  }

  int main() {
    PrimeSieve ps;
    ps.generatePrimes(2, 1000, sumPrimes);
    std::cout << "Sum of the primes below 1000 = " << sum << std::endl;
    return 0;
  }
