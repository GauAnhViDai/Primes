##############################################################################
# primesieve, optimized sieve of Eratosthenes implementation
#
# Author:        Kim Walisch
# Contact:       kim.walisch@gmail.com
# Created:       5 December 2010
# Last modified: 22 June 2011
#
# Project home:  http://primesieve.googlecode.com
##############################################################################

Contents
========

  1. About
  2. Algorithm and Complexity
  3. Memory Usage
  4. Source Archive
  5. Sieve of Eratosthenes Implementation
  6. Final Thoughts
  7. License
  8. References

1. About
========

  primesieve is a highly optimized C++ implementation of the sieve of
  Eratosthenes which generates prime numbers and prime k-tuplets (twin
  primes, prime triplets, ...) in order up to 2^64 maximum.
  
  Homepage: http://primesieve.googlecode.com

2. Algorithm and Complexity
===========================

  primesieve uses the segmented sieve of Eratosthenes with wheel
  factorization, this algorithm has a complexity of O(n log log n)
  operations and uses O(n^0.5) space.

  Sorenson in [5] describes how to add a wheel to the sieve of
  Eratosthenes and in [6] how to segment the sieve of Eratosthenes.

3. Memory Usage
===============

PrimeSieve::sieve() uses about:
pi(n^0.5) * 8 Bytes + sieve size + 450 Kilobytes           (1)

ParallelPrimeSieve::sieve() uses about:
(1) * number of threads                                    (2)

4. Source Archive
=================

  primesieve is written in portable C++, I successfully compiled it
  with 8 different C++ compilers on Windows, Linux and Mac OS X (x86,
  x86-64 and PowerPC).

  Source Code Directories
  -----------------------
  ./soe         Contains the sieve of Eratosthenes implementation.
  ./console     Contains the primesieve console application.
  ./qt-gui      Contains the primesieve GUI application.
  ./expr        Contains an arithmetic expression parser used in the
                primesieve console and GUI application.
  ./thirdparty  Contains stdint.h (needed for MSVC prior 2010)

  Documentation Directory
  -----------------------
  ./docs        files: BUGS, CHANGES, TODO, USAGE_EXAMPLES, VALGRIND.
                USAGE_EXAMPLES is a short tutorial of how to use
                PrimeSieve objects e.g. as a prime number generator.

  Build primesieve
  ----------------
  The INSTALL file in the current directory explains how to compile
  and use the primesieve console application.
  The file ./qt-gui/INSTALL explains how to compile the primesieve Qt
  GUI application.

5. Sieve of Eratosthenes Implementation (./soe directory)
=========================================================

  General Information
  -------------------

  The following file descriptions give an overview of how everything
  fits together, files that start with a capital letter contain a
  class of the same name (except WheelFactorization.h). Additionally
  the source code is documented with doxygen comments, header files
  contain the class and variable descriptions, .cpp files contain the
  function descriptions.

  Files
  -----

  * PrimeSieve.cpp and ParallelPrimeSieve.cpp (uses OpenMP)
    PrimeSieve objects provide an easy API for prime sieving, the file
    docs/USAGE_EXAMPLES contains a short tutorial.
    PrimeSieve::sieve() starts sieving, the following classes are all
    used directly or indirectly for sieving.

  * SieveOfEratosthenes.cpp (abstract class)
    Implementation of the segmented sieve of Eratosthenes using a bit
    array with 30 numbers per byte. Each byte of the sieve array holds
    the numbers i * 30 + k with k = {7, 11, 13, 17, 19, 23, 29, 31}, 
    this byte arrangement is convenient for prime k-tuplet sieving.
    The main function is SieveOfEratosthenes::sieve(uint32_t) it must
    be called consecutively for all prime numbers up to n^0.5 in order
    to sieve the primes up to n. Each sieving prime is first added to
    one of the following three Erat* objects which are used to cross
    off the multiples.

  * EratSmall.cpp
    Implementation of the segmented sieve of Eratosthenes with a
    hard-coded modulo 30 wheel (skips multiples of 2, 3 and 5). The
    algorithm is optimized for small sieving primes that have a lot of
    multiple occurrences per segment. EratSmall is a further optimized
    implementation of Achim Flammenkamp's algorithm.[7]

  * EratMedium.cpp
    Implementation of the segmented sieve of Eratosthenes with a fixed
    modulo 210 wheel (skips multiples of 2, 3, 5 and 7). The wheel is
    implemented using the Modulo210Wheel::wheel_ array from
    WheelFactorization.cpp. This algorithm is faster than EratSmall
    for sieving primes that have only a few multiple occurrences per
    segment.

  * EratBig.cpp
    Uses the same algorithm as EratMedium in conjunction with Tomas
    Oliveira e Silva's cache-friendly list algorithm.[9]
    EratBig is optimized for sieving primes that have less than one
    multiple occurrence per segment.

  * PrimeNumberGenerator.cpp (derived from SieveOfEratosthenes)
    Generates the prime numbers up to n^0.5 needed for sieving by
    PrimeNumberFinder. Used in PrimeSieve::sieve()

  * PrimeNumberFinder.cpp (derived from SieveOfEratosthenes)
    Counts, prints and generates the primes up to n. PrimeNumberFinder
    is initialized in PrimeSieve::sieve() and is used in
    PrimeNumberGenerator::generate(const uint8_t*, uint32_t)

  * PreSieve.cpp
    PreSieve objects are used to pre-sieve multiples of small primes
    (e.g. <= 19) to speed up the sieve of Eratosthenes.
    Used in SieveOfEratosthenes::sieve(uint32_t)

  * defs.h
    Contains macro definitions and constants that set the size of
    various arrays and limits within primesieve. The constants have
    been optimized for my Intel Core i5-670 3.46GHz (2 x 32 KB L1 Data
    Cache, 2 x 256 L2 Cache, 4 MB L3 Cache) from 2010.

  * WheelFactorization.h
    Contains classes and structs related to wheel factorization. Wheel
    factorization is used to skip multiples of small primes. The
    abstract ModuloWheel class is used to initialize sieving primes,
    ModuloWheel::setWheelPrime(...) calculates the first
    multiple >= startNumber_ of each sieving prime. The sieving prime
    is then stored together with a sieveIndex (position of the next
    multiple within the sieve array) and a wheelIndex as a WheelPrime
    object, these objects are used by EratSmall, EratMedium and
    EratBig to cross off the multiples.
    Sorenson explains wheels in [5].

6. Final Thoughts
=================

  Parallelization
  ---------------

  My tries to parallelize the segmented sieve of Eratosthenes using
  real parallelism (i.e. without increasing memory usage) resulted in
  a run time worse than single-threaded. Therefore in my
  ParallelPrimeSieve each thread sieves chunks of the interval
  [startNumber, stopNumber] using PrimeSieve objects until the entire
  interval has been processed. This approach scales well on multi-core
  CPUs but the memory usage depends on the number of threads i.e.
  O(n^0.5) * threads, and the primes are not generated or printed in
  order.

  Prime k-tuplets (twin primes, ...)
  ----------------------------------

  primesieve has been written for fast prime number generation, at the
  same speed it can also generate twin primes, prime triplets, ...
  One user made me aware of an algorithm specialised for twin prime
  sieving, the idea is published at:
  http://numbers.computation.free.fr/Constants/Primes/twin.html
  This algorithm can be generalised to prime k-tuplets (triplets,
  quadruplets, quintuplets, ...) resulting in a faster and more
  efficient algorithm, especially if k grows.

7. License
==========

  primesieve is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

8. References and Notes
=======================

  [1] Richard C. Singleton, "An efficient prime number generator",
      Communications of the ACM 12, 563-564, 1969.
  [2] R. P. Brent, "The first occurrence of large gaps between
      successive primes", Mathematics of Computation, 27:959-963, 
      1973.
  [3] C. Bays and R. Hudson, "The segmented sieve of Eratosthenes and
      primes in arithmetic progressions to 10^12", BIT 17:121 127, 
      1977.
  [4] Paul Pritchard, "Fast compact prime number sieves (among 
      others)", Journal of Algorithms 4 (1983), 332-344.
  [5] J. Sorenson, "An analysis of two prime number sieves", Computer 
      Science Technical Report Vol. 1028, June 1991.
  [6] J. Sorenson, "Trading Time for Space in Prime Number Sieves", 
      Lecture Notes in Computer Science, Vol. 1423 (1998), 179-194.
  [7] Achim Flammenkamp, "The Art of Prime Sieving", 1998.
      http://wwwhomes.uni-bielefeld.de/achim/prime_sieve.html
  [8] Jörg Richstein, "Segmentierung und Optimierung von Algorithmen
      zu Problemen aus der Zahlentheorie", Gießen, Univ., Diss., 1999.
  [9] Tomás Oliveira e Silva, "Fast implementation of the segmented 
      sieve of Eratosthenes", 2002.
      http://www.ieeta.pt/~tos/software/prime_sieve.html
