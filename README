##############################################################################
# primesieve, highly optimized sieve of Eratosthenes
#
# Author:        Kim Walisch
# Contact:       kim.walisch@gmail.com
# Created:       5 December 2010
# Last modified: 2 January 2010
#
# Project home:  http://primesieve.googlecode.com
##############################################################################

Contents
========

  1. Introduction
  2. Algorithm and complexity
  3. Build primesieve
  4. Directories
  5. Sieve of Eratosthenes documentation
  6. License
  7. References

1. Introduction
===============

  primesieve is a highly optimized C++ implementation of the sieve of
  Eratosthenes that finds the prime numbers and prime k-tuplets
  (twin primes, prime triplets, ...) up to 2^64 maximum.
  By the date of release this is the fastest publicly available sieve
  of Eratosthenes implementation (together with YAFU [1]).

2. Algorithm and complexity
===========================

  primesieve uses the segmented sieve of Eratosthenes with wheel
  factorization, this algorithm has a complexity of O(n) operations
  and is using O(n^0.5) bits of space. [2]

  Optimizations used in primesieve:

    * Dense bit packing with 30 numbers per byte
    * Pre-elimination of multiples of small primes (<= 19)
    * Modolo 210 wheel that skips multiples of 2, 3, 5 and 7
    * Uses Tomas Oliveira e Silva's cache-efficient list algorithm for
      big sieving primes. [3]
    * Uses the SSE 4.2 POPCNT instruction for fast prime counting
    * Parallel, uses multiple processes

3. Build primesieve
===================

  primesieve is written in portable C++ I successfully compiled it
  with 8 different C++ compilers on Windows, Linux and Mac OS X.
  I maintain two versions:

  * Console version (Single-Threaded)
    Please refer to the INSTALL file in the current directory.

  * Qt GUI version (Multi-Process)
    Please refer to the INSTALL file in the GUI directory.

4. Directories
==============

  * ./GUI
    Contains a graphical user interface front end for PrimeSieve. The
    GUI has been created with Qt4 (Qt is a C++ cross-platform
    application and UI framework by nokia).

  * ./src
    Contains the sieve of Eratosthenes implementation.

5. Sieve of Eratosthenes documentation (./src directory)
========================================================

  * src/PrimeSieve.cpp
    Main object, provides an easy to use user interface for prime
    sieving. Have a look at src/main.cpp to see how it works.
    PrimeSieve directly or indirectly implements all of the following
    classes.

  * src/SieveOfEratosthenes.cpp
    Implementation of the segmented sieve of Eratosthenes using a bit
    array (30 numbers per byte). SieveOfEratosthenes uses the
    following three Erat* algorithms to cross off multiples.
    (SieveOfEratosthenes is an abstract class, PrimeNumberGenerator
    and PrimeNumberFinder are derived from SieveOfEratosthenes)

  * src/EratSmall
    Implementation of the segmented sieve of Eratosthenes with wheel
    factorization optimized for small sieving primes.
    EratSmall uses a hardcoded modulo 30 wheel that skips multiples of
    2, 3 and 5. EratSmall is a further optimized implementation of
    Achim Flammenkamp's algorithm. [4]

  * src/EratMedium
    Implementation of the segmented sieve of Eratosthenes with wheel
    factorization optimized for medium sieving primes.
    EratMedium uses a dynamic modulo 210 wheel.

  * src/EratBig
    Implementation of the segmented sieve of Eratosthenes with wheel
    factorization optimized for big sieving primes.
    EratBig uses a dynamic modulo 210 wheel in conjunction with Tomas
    Oliveira e Silva's cache-efficient list algorithm. [3]

  * src/PrimeNumberGenerator.cpp
    Generates the prime numbers up to sqrt(stopNumber) needed for
    sieving by PrimeNumberFinder.

  * src/PrimeNumberFinder.cpp
    Main SieveOfEratosthenes object, used to count and print prime
    numbers and prime k-tuplets.

  * src/ResetSieve.cpp
    ResetSieve is used to reset the sieve array (resets bits to 1) of
    SieveOfEratosthenes after each sieve round. ResetSieve also
    pre-eliminates multiples of small primes (<= 19).

  * src/settings.h
    Contains compile-time constants that set the size of various
    arrays within primesieve. The values are optimized for CPUs with
    32 to 64 KiloBytes of L1 Data Cache.

  * src/WheelFactorization.h
    Contains data structures related to wheel factorization. Wheel
    factorization is used to skip multiples of small primes (i.e. a
    modulo 210 wheel skips multiples of 2, 3, 5 and 7).

6. License
==========

  primesieve is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

7. References
=============

  [1] YAFU Yet Another Factorization Utility, has a very fast
    multi-threaded sieve of Eratosthenes implementation in C.
    http://sites.google.com/site/bbuhrow/home

  [2] Paul Pritchard, "Fast compact prime number sieves (among
    others)", Journal of Algorithms 4 (1983) 332-344

  [3] Tomas Oliveira e Silva, "Fast implementation of the segmented
    sieve of Eratosthenes",
    http://www.ieeta.pt/~tos/software/prime_sieve.html

  [4] Achim Flammenkamp, "The Art of Prime Sieving",
    http://wwwhomes.uni-bielefeld.de/achim/prime_sieve.html
