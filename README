##############################################################################
# primesieve, optimized sieve of Eratosthenes implementation
#
# Author:        Kim Walisch
# Contact:       kim.walisch@gmail.com
# Created:       5 December 2010
# Last modified: 23 May 2011
#
# Project home:  http://primesieve.googlecode.com
##############################################################################

Contents
========

  1. About
  2. Algorithm and Complexity
  3. Directories
  4. Sieve of Eratosthenes Implementation
  5. Prime Number Generator
  6. Build primesieve
  7. Final Thoughts
  8. License
  9. References

1. About
========

  primesieve is a highly optimized C++ implementation of the sieve of
  Eratosthenes that generates prime numbers and prime k-tuplets (twin
  primes, prime triplets, ...) up to 2^64 maximum.
  By the date of release this is the fastest publicly available sieve
  of Eratosthenes implementation.[6]

2. Algorithm and Complexity
===========================

  primesieve uses the segmented sieve of Eratosthenes with wheel
  factorization also known as Pritchard's segmented wheel sieve, this
  algorithm has a complexity of O(n) operations and uses O(n^0.5)
  space.[1] Sorenson in [2] explains the algorithm fairly well.

  Optimizations used in primesieve:

    * Uses a bit array with 30 numbers per byte for sieving
    * Uses 8 bytes per sieving prime (packed)
    * Pre-eliminates multiples of small primes <= 19
    * Uses a modolo 210 wheel that skips multiples of 2, 3, 5 and 7
    * Uses specialised algorithms for small, medium and big sieving
      primes
    * Uses Tomas Oliveira e Silva's cache-friendly segmented sieve
      of Eratosthenes for big sieving primes.[3]
    * Uses the SSE 4.2 POPCNT instruction for fast bit counting
    * Parallel, uses multiple threads (OpenMP)

3. Directories
==============

  * ./soe         Contains the sieve of Eratosthenes implementation
  * ./console     Contains the console version of primesieve
  * ./qt-gui      Contains the GUI version of primesieve (created with
                  the Qt4 framework[7])
  * ./expr        Contains an arithmetic expression parser used in the
                  console and GUI version of primesieve
  * ./thirdparty  Contains stdint.h (needed for MSVC prior 2010)
  * ./docs        Contains documentation files

4. Sieve of Eratosthenes Implementation (./soe Directory)
=========================================================

  Summary of the important files:

  * PrimeSieve.cpp and ParallelPrimeSieve.cpp (uses OpenMP)
    PrimeSieve objects provide an easy API for prime sieving. The file
    docs/USAGE_EXAMPLES has source code examples that show how to use
    PrimeSieve to generate prime numbers, count prime numbers, print
    prime triplets, ... PrimeSieve directly or indirectly implements
    all of the following classes.

  * SieveOfEratosthenes.cpp
    Implementation of the segmented sieve of Eratosthenes using a bit
    array with 30 numbers per byte. SieveOfEratosthenes uses the
    following three Erat* algorithms to cross off multiples.
    (SieveOfEratosthenes is an abstract class)

  * EratSmall.cpp
    Implementation of the segmented sieve of Eratosthenes with wheel
    factorization optimized for small sieving primes. EratSmall uses a
    fixed modulo 30 wheel that skips multiples of 2, 3 and 5.
    EratSmall is a further optimized implementation of Achim
    Flammenkamp's algorithm.[4]

  * EratMedium.cpp
    Implementation of the segmented sieve of Eratosthenes with wheel
    factorization optimized for medium sieving primes. EratMedium uses
    a fixed modulo 210 wheel that skips multiples of 2, 3, 5 and 7.

  * EratBig.cpp
    Implementation of the segmented sieve of Eratosthenes with wheel
    factorization optimized for big sieving primes. EratBig uses a
    fixed modulo 210 wheel that skips multiples of 2, 3, 5 and 7.
    EratBig uses the same algorithm as EratMedium in conjunction with
    Tomas Oliveira e Silva's cache-friendly list algorithm.[3]

  * PrimeNumberGenerator.cpp
    Generates the prime numbers up to stopNumber^0.5 needed for
    sieving by PrimeNumberFinder.
    (Is derived from SieveOfEratosthenes)

  * PrimeNumberFinder.cpp
    Main SieveOfEratosthenes object, is used to count and print prime
    numbers and prime k-tuplets.
    (Is derived from SieveOfEratosthenes)

  * ResetSieve.cpp
    ResetSieve uses a modulo wheel array to reset the sieve array
    (sets bits to 1) of SieveOfEratosthenes objects after each sieved
    segment. This also eliminates multiples of small primes <= 19 for
    the next segment without sieving.

  * defs.h
    Contains macro definitions and constants that set the size of
    various arrays and limits within primesieve. The values are
    optimized for CPUs with 32 to 64 KiloBytes of L1 Data Cache.

  * WheelFactorization.h
    Contains classes and structures related to wheel factorization.
    Wheel factorization is used to skip multiples of small primes (see
    [5] for a good introduction).

  Note:
  The classes are explained in more detail in their header files.

5. Prime Number Generator
=========================

  PrimeSieve may be used as a fast C++ prime number generator, see
  docs/USAGE_EXAMPLES for an example.

6. Build primesieve
===================

  primesieve is written in portable C++ I successfully compiled it
  with 8 different C++ compilers on Windows, Linux and Mac OS X (x86,
  x86-64 and PowerPC). I maintain two versions:

  * Console version
    Please refer to the INSTALL file in the current directory.
  * Qt GUI version
    Please refer to the INSTALL file in the ./qt-gui directory.

7. Final Thoughts
=================

  The segmented sieve of Eratosthenes does not scale well using real
  parallelism i.e. without increasing memory usage (at least my tries
  delivered a performance worse than single-threaded). Thus my
  ParallelPrimeSieve subdivides the sieve interval into a number of
  subintervals matching the number of logical CPU cores, each
  subinterval is then sieved in a separate thread using a PrimeSieve
  object. This approach scales very well but at the cost of an
  increased memory usage and the prime numbers are not generated in
  order.

  My program uses the fastest (not the most efficient) known
  algorithms (in 2011) for prime number generation at the same speed
  it can also generate prime k-tuplets. One user made me aware of an
  algorithm that is faster and more efficient for prime k-tuplets (up
  to 2000% for prime septuplets), the following site explains the
  algorithm for twin primes:
  http://numbers.computation.free.fr/Constants/Primes/twin.html

8. License
==========

  primesieve is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

9. References and Notes
=======================

  [1] Paul Pritchard, "Fast compact prime number sieves (among
      others)", Journal of Algorithms 4 (1983) 332-344
  [2] Jonathan P. Sorenson, "Trading Time for Space in Prime Number
      Sieves", Lecture Notes in Computer Science, Vol. 1423 (1998),
      179-194
  [3] Tomas Oliveira e Silva, "Fast implementation of the segmented
      sieve of Eratosthenes", (2002)
      http://www.ieeta.pt/~tos/software/prime_sieve.html
  [4] Achim Flammenkamp, "The Art of Prime Sieving",
      http://wwwhomes.uni-bielefeld.de/achim/prime_sieve.html
  [5] Wheel factorization at the Prime Glossary
      http://primes.utm.edu/glossary/page.php?sort=WheelFactorization
  [6] YAFU Yet Another Factorization Utility, has also a very fast
      multi-threaded sieve of Eratosthenes implementation that is
      equally fast in some cases.
      http://sites.google.com/site/bbuhrow/home
  [7] Qt is a cross-platform application and UI framework.
      http://qt.nokia.com/products/
