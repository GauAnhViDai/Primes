######################################################################
# Microsoft Visual C++ Makefile for the primesieve console
# application and the primesieve C++ library
#
# Author:          Kim Walisch
# Contact:         kim.walisch@gmail.com
# Created:         10 July 2010
# Last modified:   18 February 2013
#
# Project home:    http://primesieve.googlecode.com
######################################################################

TARGET   = primesieve
CXX      = cl /nologo
CXXFLAGS = /W2 /O2 /EHsc
INCPATH  = /I src\thirdparty
LINK     = link /nologo
BINDIR   = bin
DISTDIR  = dist
EXDIR    = examples
LIBDIR   = lib
SOEDIR   = src\soe

BIN_OBJECTS = \
  $(BINDIR)\EratBig.obj \
  $(BINDIR)\EratMedium.obj \
  $(BINDIR)\EratSmall.obj \
  $(BINDIR)\ParallelPrimeSieve.obj \
  $(BINDIR)\popcount.obj \
  $(BINDIR)\PreSieve.obj \
  $(BINDIR)\PrimeFinder.obj \
  $(BINDIR)\PrimeGenerator.obj \
  $(BINDIR)\PrimeSieve.obj \
  $(BINDIR)\SieveOfEratosthenes.obj \
  $(BINDIR)\WheelFactorization.obj

LIB_OBJECTS = \
  $(LIBDIR)\EratBig.obj \
  $(LIBDIR)\EratMedium.obj \
  $(LIBDIR)\EratSmall.obj \
  $(LIBDIR)\ParallelPrimeSieve.obj \
  $(LIBDIR)\popcount.obj \
  $(LIBDIR)\PreSieve.obj \
  $(LIBDIR)\PrimeFinder.obj \
  $(LIBDIR)\PrimeGenerator.obj \
  $(LIBDIR)\PrimeSieve.obj \
  $(LIBDIR)\SieveOfEratosthenes.obj \
  $(LIBDIR)\WheelFactorization.obj

APP_OBJECTS = \
  $(BINDIR)\cmdoptions.obj \
  $(BINDIR)\help.obj \
  $(BINDIR)\main.obj

EXAMPLE_OBJECTS = \
  $(EXDIR)\cancel_prime_generation.obj \
  $(EXDIR)\count_primes.obj \
  $(EXDIR)\flags.obj \
  $(EXDIR)\generate_primes.obj \
  $(EXDIR)\generate_primes_oop.obj \
  $(EXDIR)\nth_prime.obj \
  $(EXDIR)\parallel_count.obj \
  $(EXDIR)\parallel_sum_primes.obj \
  $(EXDIR)\parallel_sum_primes2.obj \
  $(EXDIR)\primesieve_error.obj \
  $(EXDIR)\print_twins.obj \
  $(EXDIR)\sieve_size.obj \
  $(EXDIR)\timing.obj

SOE_HEADERS = \
  $(SOEDIR)\bits.h \
  $(SOEDIR)\config.h \
  $(SOEDIR)\endiansafe_cast.h \
  $(SOEDIR)\EratBig.h \
  $(SOEDIR)\EratMedium.h \
  $(SOEDIR)\EratSmall.h \
  $(SOEDIR)\imath.h \
  $(SOEDIR)\ParallelPrimeSieve.h \
  $(SOEDIR)\ParallelPrimeSieve-lock.h \
  $(SOEDIR)\popcount.h \
  $(SOEDIR)\PreSieve.h \
  $(SOEDIR)\PrimeFinder.h \
  $(SOEDIR)\PrimeGenerator.h \
  $(SOEDIR)\PrimeSieve.h \
  $(SOEDIR)\primesieve_error.h \
  $(SOEDIR)\PrimeSieveCallback.h \
  $(SOEDIR)\PrimeSieve-lock.h \
  $(SOEDIR)\SieveOfEratosthenes.h \
  $(SOEDIR)\SieveOfEratosthenes-GENERATE.h \
  $(SOEDIR)\SieveOfEratosthenes-inline.h \
  $(SOEDIR)\toString.h \
  $(SOEDIR)\WheelFactorization.h

#-----------------------------------------------------------------------------
# Add /openmp if MSVC supports OpenMP
#-----------------------------------------------------------------------------

!IF ([$(CXX) /openmp /c src\test\has_openmp.cpp /Fonul > nul] == 0)
CXXFLAGS = $(CXXFLAGS) /openmp
!ELSE
NO_OPENMP = true
!ENDIF

#-----------------------------------------------------------------------------
# Add L1_DCACHE_SIZE to CXXFLAGS
#-----------------------------------------------------------------------------

!IFDEF L1_DCACHE_SIZE
CXXFLAGS = $(CXXFLAGS) /DL1_DCACHE_SIZE=$(L1_DCACHE_SIZE)
!ENDIF

#-----------------------------------------------------------------------------
# Add include path to CXXFLAGS
#-----------------------------------------------------------------------------

!IFDEF INCPATH
CXXFLAGS = $(CXXFLAGS) $(INCPATH)
!ENDIF

#-----------------------------------------------------------------------------
# Build the primesieve console application (read INSTALL)
#-----------------------------------------------------------------------------

bin: bin_dir bin_obj openmp_note

bin_dir:
	@if not exist $(BINDIR) mkdir $(BINDIR)

bin_obj: $(APP_OBJECTS) $(BINDIR)\test.obj $(BIN_OBJECTS)
	$(LINK) /OUT:$(BINDIR)\$(TARGET).exe $**

$(BIN_OBJECTS): $(SOEDIR)\$(@B).cpp $(SOE_HEADERS)
	$(CXX) $(CXXFLAGS) /c $(SOEDIR)\$(@B).cpp /Fo$@

$(APP_OBJECTS): src\application\$(@B).cpp $(SOE_HEADERS)
	$(CXX) $(CXXFLAGS) /c src\application\$(@B).cpp /Fo$@

$(BINDIR)\test.obj: src\test\test.cpp $(SOE_HEADERS)
	$(CXX) $(CXXFLAGS) /c src\test\test.cpp /Fo$@

#-----------------------------------------------------------------------------
# Build a static primesieve.lib (read doc/LIBPRIMESIEVE)
#-----------------------------------------------------------------------------

lib: lib_dir lib_obj openmp_note

lib_dir:
	@if not exist $(LIBDIR) mkdir $(LIBDIR)

lib_obj: $(LIB_OBJECTS)
	lib.exe /nologo /OUT:$(LIBDIR)\$(TARGET).lib $**

$(LIB_OBJECTS): $(SOEDIR)\$(@B).cpp $(SOE_HEADERS)
	$(CXX) $(CXXFLAGS) /c $(SOEDIR)\$(@B).cpp /Fo$@

#-----------------------------------------------------------------------------
# Create a primesieve.lib distribution archive (./dist)
#-----------------------------------------------------------------------------

dist: dist_dir
	copy /Y $(LIBDIR)\$(TARGET).lib $(DISTDIR)
	copy /Y $(SOEDIR)\PrimeSieve.h $(DISTDIR)\$(TARGET)\soe
	copy /Y $(SOEDIR)\ParallelPrimeSieve.h $(DISTDIR)\$(TARGET)\soe
	copy /Y $(SOEDIR)\primesieve_error.h $(DISTDIR)\$(TARGET)\soe
	copy /Y $(SOEDIR)\PrimeSieveCallback.h $(DISTDIR)\$(TARGET)\soe

dist_dir:
	@if not exist $(DISTDIR)\$(TARGET)\soe mkdir $(DISTDIR)\$(TARGET)\soe

#-----------------------------------------------------------------------------
# Build the example programs (read examples/INSTALL)
#-----------------------------------------------------------------------------

examples: $(EXAMPLE_OBJECTS) openmp_note

$(EXAMPLE_OBJECTS): $(EXDIR)\$(@B).cpp
	$(CXX) $(CXXFLAGS) /I $(DISTDIR) $** /Fo$@ /Fe$(@R).exe /link dist\$(TARGET).lib

#-----------------------------------------------------------------------------
# Common targets (all, clean)
#-----------------------------------------------------------------------------

all: bin lib

clean:
	-rd /Q /S $(BINDIR) $(LIBDIR) $(DISTDIR) 2> /nul
	-del /Q $(EXDIR)\*.exe $(EXDIR)\*.obj 2> /nul

#-----------------------------------------------------------------------------
# `nmake -f Makefile.msvc check` runs correctness tests
#-----------------------------------------------------------------------------

check test: bin
	$(BINDIR)\$(TARGET).exe --test

#-----------------------------------------------------------------------------
# OpenMP requires Microsoft Visual C++ Professional or higher
#-----------------------------------------------------------------------------

openmp_note:
!IF DEFINED(NO_OPENMP)
	@echo "                                                                   "
	@echo "  NOTE: Your MSVC version does not support OpenMP. For OpenMP you  "
	@echo "        need Microsoft Visual C++ Professional or higher.          "
!ENDIF

#-----------------------------------------------------------------------------
# Makefile help menu
#-----------------------------------------------------------------------------

help:
	@echo ------------------------------------------------------
	@echo -------------- primesieve build options --------------
	@echo ------------------------------------------------------
	@echo "nmake -f Makefile.msvc                    Build the primesieve application"
	@echo "nmake -f Makefile.msvc L1_DCACHE_SIZE=64  Set CPU L1 data cache, here 64 KB"
	@echo "nmake -f Makefile.msvc check              Test the primesieve binary"
	@echo "nmake -f Makefile.msvc lib                Build a static primesieve.lib"
	@echo "nmake -f Makefile.msvc dist               Create a lib distribution archive"
	@echo "nmake -f Makefile.msvc examples           Build the example programs"
	@echo "nmake -f Makefile.msvc clean              Clean the output directories"
	@echo "nmake -f Makefile.msvc help               Print this help menu"
