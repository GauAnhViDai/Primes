September 26, 2012
Kim Walisch, <kim.walisch@gmail.com>
http://primesieve.googlecode.com

Contents
========

  1. About libprimesieve
  2. Build and install libprimesieve      (Unix-like OSes)
  3. How to link against libprimesieve    (Unix-like OSes)
  4. Build primesieve.lib                 (Windows, Visual C++)
  5. How to link against primesieve.lib   (Windows, Visual C++)

1. About libprimesieve
======================

  primesieve has been designed to be usable in other projects, this
  file explains how to build primesieve as a C++ library a.k.a.
  libprimesieve and how to link it with your application.
  By default libprimesieve is built as a static library which causes
  no dependency, on Unix-like operating systems (Linux, Mac OS X, ...)
  it is also possible to build libprimesieve as a shared library.

  The file USAGE_EXAMPLES contains C++ source code examples that show
  how to generate, count and print primes and prime k-tuplets (twin
  primes, ...) using libprimesieve. 

2. Build and install libprimesieve (Unix-like OSes)
===================================================

  Unzip the primesieve source archive, open a terminal and cd into the
  newly created directory. The following two make commands build
  libprimesieve using g++ and install it to /usr/local (Linux) or /usr
  (Unix).

  For a static libprimesieve use:
  -------------------------------
  $ make lib
  $ sudo make install

  A static libprimesieve causes no dependency when you link against
  it but it increases your executable size by ~ 100 kilobytes.

  For a shared libprimesieve use:
  -------------------------------
  $ make lib SHARED=yes
  $ sudo make install

  A shared libprimesieve does not increase your executable size and
  makes it easy to update to new libprimesieve versions but your
  executable will depend on libprimesieve.

  More build options
  ------------------
  $ make lib CXX=icpc CXXFLAGS="-fast -openmp"   Use an alternate C++ compiler, here icpc.
  $ make dist                                    Create a distribution archive.
  $ sudo make install PREFIX=/path               Set the installation path.
  $ sudo make uninstall                          Completely remove libprimesieve.
  $ make help                                    Print all build options.

3. How to link against libprimesieve (Unix-like OSes)
=====================================================

  After having built and installed libprimesieve the doc/sum_primes.cpp
  example program can be compiled by specifying -lprimesieve at the
  end of the linker command:

  $ g++ doc/sum_primes.cpp -o sum_primes -lprimesieve
  $ ./sum_primes
  Sum of the primes below 1000 = 76127

  You must add -fopenmp if:
  -------------------------
  You use ParallelPrimeSieve with a static libprimesieve.

4. Build primesieve.lib (Windows, MSVC)
=======================================

  Unzip the primesieve source archive, open a Visual Studio Command
  Prompt and cd into the newly created directory. Then run:

  > nmake -f Makefile.msvc lib
  > nmake -f Makefile.msvc dist

  This builds a static primesieve.lib library using Microsoft's
  Visual C++ compiler and creates a distribution archive ./dist with
  primesieve.lib and the PrimeSieve header files.

5. How to link against primesieve.lib (Windows, MSVC)
=====================================================

  After having built primesieve.lib the doc/sum_primes.cpp example
  program can be compiled by specifying primesieve.lib to the linker
  and including (/I) the PrimeSieve header files:

  > cl /EHsc doc\sum_primes.cpp /I "dist" /link "dist\primesieve.lib"
  > sum_primes.exe
  Sum of the primes below 1000 = 76127

  primesieve.lib is a static Windows library so it causes no
  dependency if you link against it.

  OpenMP multi-threading
  ----------------------
  Since version 3.5 primesieve requires OpenMP 3.0 or later which is
  currently (September 2012) not supported by Microsoft Visual C++.
  You can either switch to primesieve 3.4
  http://primesieve.googlecode.com/files/primesieve-3.4-src.zip
  which builds with OpenMP using Microsoft Visual C++ >= 2005 or use
  an alternate compiler e.g. the Intel C++ Compiler or MinGW.
