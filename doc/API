September 25, 2012
Kim Walisch, <kim.walisch@gmail.com>
http://primesieve.googlecode.com

About
=====

  This file contains the public API of the PrimeSieve and
  ParallelPrimeSieve C++ classes (src/soe). The USAGE_EXAMPLES file
  contains source code examples that show how to use PrimeSieve
  objects to generate, count and print primes and prime k-tuplets.

PrimeSieve API
==============

  PrimeSieve provides an easy API to sieve primes and prime k-tuplets
  (twin primes, prime triplets, ...). The start and stop parameters in
  many methods set the sieve interval [start, stop].

  1. Public Member Functions
  ==========================

    Constructor and destructor
    --------------------------
    PrimeSieve();
    virtual ~PrimeSieve();

    Getters
    -------
    uint64_t getStart()     const;
    uint64_t getStop()      const;
    int      getSieveSize() const;
    int      getPreSieve()  const;
    int      getFlags()     const;
    double   getStatus()    const;
    double   getSeconds()   const;

    Setters
    -------
    void setStart(uint64_t);
    void setStop(uint64_t);
    void setSieveSize(int);
    void setPreSieve(int);
    void setFlags(int);
    void addFlags(int);

    Bool is* methods
    ----------------
    bool isFlag(int)      const;
    bool isFlag(int, int) const;
    bool isGenerate()     const;
    bool isCount()        const;
    bool isCount(int)     const;
    bool isPrint()        const;
    bool isPrint(int)     const;
    bool isStatus()       const;

    Prime number generation, Runtime: O(n log log n)
    ------------------------------------------------
    void generatePrimes(uint32_t start, uint32_t stop, void (*callback)(uint32_t));
    void generatePrimes(uint64_t start, uint64_t stop, void (*callback)(uint64_t));
    void generatePrimes(uint32_t start, uint32_t stop, void (*callback)(uint32_t, void*), void*);
    void generatePrimes(uint64_t start, uint64_t stop, void (*callback)(uint64_t, void*), void*);
    void generatePrimes(uint64_t start, uint64_t stop, void (*callback)(uint64_t, int));

    Print methods, Runtime: O(n log log n)
    --------------------------------------
    void printPrimes     (uint64_t start, uint64_t stop);
    void printTwins      (uint64_t start, uint64_t stop);
    void printTriplets   (uint64_t start, uint64_t stop);
    void printQuadruplets(uint64_t start, uint64_t stop);
    void printQuintuplets(uint64_t start, uint64_t stop);
    void printSextuplets (uint64_t start, uint64_t stop);
    void printSeptuplets (uint64_t start, uint64_t stop);

    Count methods, Runtime: O(n log log n)
    --------------------------------------
    uint64_t getPrimeCount     (uint64_t start, uint64_t stop);
    uint64_t getTwinCount      (uint64_t start, uint64_t stop);
    uint64_t getTripletCount   (uint64_t start, uint64_t stop);
    uint64_t getQuadrupletCount(uint64_t start, uint64_t stop);
    uint64_t getQuintupletCount(uint64_t start, uint64_t stop);
    uint64_t getSextupletCount (uint64_t start, uint64_t stop);
    uint64_t getSeptupletCount (uint64_t start, uint64_t stop);

    Count getters, Runtime: O(1)
    ----------------------------
    uint64_t getPrimeCount()      const;
    uint64_t getTwinCount()       const;
    uint64_t getTripletCount()    const;
    uint64_t getQuadrupletCount() const;
    uint64_t getQuintupletCount() const;
    uint64_t getSextupletCount()  const;
    uint64_t getSeptupletCount()  const;
    uint64_t getCounts(int)       const;

    Sieve methods, Runtime: O(n log log n)
    --------------------------------------
    virtual void sieve();
    void         sieve(uint64_t start, uint64_t stop);
    void         sieve(uint64_t start, uint64_t stop, int flags);

  2. Static Public Member Functions
  =================================

    Version
    -------
    static std::string getVersion();
    static int         getMajorVersion();
    static int         getMinorVersion();

ParallelPrimeSieve API
======================

  The ParallelPrimeSieve class is derived from PrimeSieve so it
  inherits PrimeSieve's API. The following API methods are exclusive
  to ParallelPrimeSieve:

  1. Public Member Functions
  ==========================

    Constructor and destructor
    --------------------------
    ParallelPrimeSieve();
    virtual ~ParallelPrimeSieve();

    Thread settings
    ---------------
    void ParallelPrimeSieve::setNumThreads(int);
    int  ParallelPrimeSieve::getNumThreads() const;

  2. Static Public Member Functions
  =================================

    CPU information
    ---------------
    static int ParallelPrimeSieve::getMaxThreads();

    The getMaxThreads() method returns the number of logical CPU
    cores, e.g. for a quad-core CPU with Hyper-Threading
    getMaxThreads() returns 8.
