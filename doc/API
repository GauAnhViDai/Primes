September 21, 2012
Kim Walisch, <kim.walisch@gmail.com>
http://primesieve.googlecode.com

About
=====

  This file contains the public API (application programming
  interface) of the PrimeSieve and ParallelPrimeSieve C++ classes
  (src/soe). The file USAGE_EXAMPLES explains how to use these methods
  to generate, count and print primes and prime k-tuplets.

PrimeSieve API
==============

  Constructor and destructor
  --------------------------
  PrimeSieve();
  virtual ~PrimeSieve();

  Getters
  -------
  uint64_t getStart() const;
  uint64_t getStop() const;
  int getSieveSize() const;
  int getPreSieve() const;
  int getFlags() const;
  double getStatus() const;
  double getSeconds() const;

  Setters
  -------
  void setStart(uint64_t);
  void setStop(uint64_t);
  void setSieveSize(int);
  void setPreSieve(int);
  void setFlags(int);
  void addFlags(int);

  Prime number generation
  -----------------------
  void generatePrimes(uint32_t start, uint32_t stop, void (*callback)(uint32_t));
  void generatePrimes(uint64_t start, uint64_t stop, void (*callback)(uint64_t));
  void generatePrimes(uint32_t start, uint32_t stop, void (*callback)(uint32_t, void*), void*);
  void generatePrimes(uint64_t start, uint64_t stop, void (*callback)(uint64_t, void*), void*);
  void generatePrimes(uint64_t start, uint64_t stop, void (*callback)(uint64_t, int));

  Print methods
  -------------
  void printPrimes     (uint64_t start, uint64_t stop);
  void printTwins      (uint64_t start, uint64_t stop);
  void printTriplets   (uint64_t start, uint64_t stop);
  void printQuadruplets(uint64_t start, uint64_t stop);
  void printQuintuplets(uint64_t start, uint64_t stop);
  void printSextuplets (uint64_t start, uint64_t stop);
  void printSeptuplets (uint64_t start, uint64_t stop);

  Count methods
  -------------
  uint64_t getPrimeCount     (uint64_t start, uint64_t stop);
  uint64_t getTwinCount      (uint64_t start, uint64_t stop);
  uint64_t getTripletCount   (uint64_t start, uint64_t stop);
  uint64_t getQuadrupletCount(uint64_t start, uint64_t stop);
  uint64_t getQuintupletCount(uint64_t start, uint64_t stop);
  uint64_t getSextupletCount (uint64_t start, uint64_t stop);
  uint64_t getSeptupletCount (uint64_t start, uint64_t stop);

  Bool is* methods
  ----------------
  bool isFlag(int) const;
  bool isFlag(int, int) const;
  bool isGenerate() const;
  bool isCount() const;
  bool isCount(int) const;
  bool isPrint() const;
  bool isPrint(int) const;
  bool isStatus() const;

  Sieve methods (see USAGE_EXAMPLES 9.)
  -------------------------------------
  virtual void sieve();
  void sieve(uint64_t start, uint64_t stop);
  void sieve(uint64_t start, uint64_t stop, int flags);

  Count getters (see USAGE_EXAMPLES 9.)
  -------------------------------------
  uint64_t getPrimeCount() const;
  uint64_t getTwinCount() const;
  uint64_t getTripletCount() const;
  uint64_t getQuadrupletCount() const;
  uint64_t getQuintupletCount() const;
  uint64_t getSextupletCount() const;
  uint64_t getSeptupletCount() const;
  uint64_t getCounts(int) const;

ParallelPrimeSieve API
======================

  The ParallelPrimeSieve class is derived from PrimeSieve so it
  inherits PrimeSieve's API. The following API methods are exclusive
  to ParallelPrimeSieve:

  Constructor and destructor
  --------------------------
  ParallelPrimeSieve();
  virtual ~ParallelPrimeSieve();

  Thread settings
  ---------------
  void       ParallelPrimeSieve::setNumThreads(int);
  int        ParallelPrimeSieve::getNumThreads() const;
  static int ParallelPrimeSieve::getMaxThreads();
