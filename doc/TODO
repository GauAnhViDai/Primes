June 24, 2012
Kim Walisch, <kim.walisch@gmail.com>
http://primesieve.googlecode.com

C++11
-----

I may implement the following TODOs in a few years when C++11 is
widely supported.

1. Use smart pointers (std::unique_ptr) for dynamic memory allocation.
2. Use std::array instead of C-style arrays and std::vector.
3. Use auto and final keywords where appropriate.
4. Use <cstdint> instead of <stdint.h>.
5. Use nullptr instead of NULL (remove <cstdlib> header).

OpenMP
------

1. ParallelPrimeSieve.cpp is currently not exception safe when >= 2
   threads are used due to lack of C++ exception support in OpenMP 3.1
   (May 2012), OpenMP 4 seems to finally support C++ exceptions.
2. Once OpenMP supports array reduction I should use it in
   ParallelPrimeSieve.cpp.

Possible future optimizations
-----------------------------

1. Once most CPUs have 64 KB L1 data cache per core set
   L1_DCACHE_SIZE=64 in src/soe/config.h.
2. Prime number generation can be sped up by about 10 percent when
   sieving < 2^32 using the BSF instruction (Assembly) instead of the
   De Bruijn bitscan in SieveOfEratosthenes-inline.h.
