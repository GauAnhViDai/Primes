######################################################################
# Compilation guide for primesieve (console version)
#
# Author:        Kim Walisch
# Contact:       kim.walisch@gmail.com
# Created:       10 July 2010
# Last modified: 10 June 2012
#
# Project home:  http://primesieve.googlecode.com
######################################################################

I. About
========

  This file explains how to compile and use the primesieve console
  application, to compile the primesieve GUI application please refer
  to src/qt-gui/INSTALL. If you want to use primesieve in your own C++
  program read LIBPRIMESIEVE.

  Precompiled binaries for Windows, Linux and Mac OS X are available
  at: http://code.google.com/p/primesieve/downloads/list

II. How to build primesieve
===========================

  Unzip the source archive, open a terminal or 'Visual Studio Command 
  Prompt' and cd into the primesieve directory. Now use one of the
  following make commands to build primesieve using your favorite C++
  compiler:

  $ make                     GNU g++
  > nmake -f Makefile.msvc   Microsoft Visual C++

  Other C++ compilers
  -------------------
  $ make CXX=icpc    CXXFLAGS="-O2 -openmp"
  $ make CXX=clang++ CXXFLAGS="-O2"
  $ make CXX=sunCC   CXXFLAGS="-fast -xopenmp"
  $ make CXX=pathCC  CXXFLAGS="-Ofast"
  ...

  Makefile help menu
  ------------------
  $ make help                     Shows more options
  > nmake -f Makefile.msvc help   ...

  Note:
  If your compiler supports OpenMP 3.0 or later you can add the
  corresponding flag to CXXFLAGS to enable multi-threading, for g++
  and Microsoft Visual C++ this is done automatically.

III. How to use it
==================

  > cd bin
  > primesieve 2 10000       Count the primes up to 10000
  > primesieve 2 1E6 -p1     Print the primes up to 10^6
  > primesieve 100 200 -p2   Print the twin primes within [100, 200]
  > primesieve -test         Run various sieving tests
  > primesieve -help         Print the help menu

  Note: for Unix-like operating systems use ./primesieve

IV. Target a specific CPU
=========================

  You can indicate your CPU's L1 data cache size in kilobytes per
  core to get the best performance (default 32) e.g.:

  $ make L1_DCACHE_SIZE=64

V. Compiler benchmark
=====================

  System: Intel Core-i5 670 3.46GHz, DDR3-1333
  OS 1:   Scientific Linux 6.2 x86_64
  OS 2:   Windows 7 64-bit

  Best time in seconds to sieve an interval of size 10^10 starting at
  10^18 (single-threaded):

  $ ./primesieve-3.8 1E18 -o1E10 -t1 -s256

  Compilers (June 2012)       Optimization flags   OSes      Time/s   Perf.
  -------------------------------------------------------------------------
  Intel C++ Compiler 12.0     -O2 -ipo -prof-use   Linux     14.07    100%
  GNU g++ 4.7                 -O2                  Linux     14.41     98%
  Oracle Studio 12            -fast                Linux     14.56     97%
  Microsoft Visual C++ 2010   /O2                  Windows   15.05     93%
  LLVM/clang++ 3.1            -O2                  Linux     15.22     92%
  PathScale EKOPath 4.0       -Ofast               Linux     16.72     84%
