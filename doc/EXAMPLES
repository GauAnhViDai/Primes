June 29, 2013
Kim Walisch, <kim.walisch@gmail.com>
http://primesieve.googlecode.com

Contents
========

   1. About
   2. Store primes in a std::vector
   3. Count primes
   4. Print primes
   5. Callback primes
   6. Callback primes OOP
   7. Cancel callback
   8. ParallelPrimeSieve
   9. Timing
  10. Performance tuning
  11. C++ Exceptions
  12. Flags

1. About
========

  This file contains C++ source code examples that show how to use
  PrimeSieve and ParallelPrimeSieve objects. Both PrimeSieve and
  ParallelPrimeSieve objects can generate, print (to cout) and count
  primes and prime k-tuplets (twins, triplets, ...).

  For these examples to compile you need to build primesieve as a
  library and add it to the linker, this is explained in the
  LIBPRIMESIEVE file. The complete PrimeSieve and ParallelPrimeSieve
  API is presented in the doc/API file.

  Try it yourself!
  ----------------
  Most of the example programs presented in this file are also stored
  in the ../examples directory. Please read ../examples/README for
  compilation instructions.

2. Store primes in a std::vector
================================

  API for std::vector
  -------------------
  void generatePrimes(uint64_t start, uint64_t stop, std::vector<T>*);
  void generate_N_Primes(uint64_t n, std::vector<T>*);
  void generate_N_Primes(uint64_t start, uint64_t n, std::vector<T>*);

  ////////////////////////////////////////////////////////////////////
  // store_primes_in_vector.cpp
  // Store primes in a vector using PrimeSieve.

  #include <primesieve/soe/PrimeSieve.h>
  #include <vector>

  int main()
  {
    std::vector<int> primes;
    PrimeSieve ps;

    // Store primes between 100 and 200
    int start = 100, stop = 200;
    ps.generatePrimes(start, stop, &primes);

    primes.clear();

    // Store first 100 primes
    int n = 100;
    ps.generate_N_Primes(n, &primes);

    return 0;
  }

  ////////////////////////////////////////////////////////////////////

3. Count primes
===============

  API for counting
  ----------------
  uint64_t PrimeSieve::countPrimes     (uint64_t start, uint64_t stop);
  uint64_t PrimeSieve::countTwins      (uint64_t start, uint64_t stop);
  uint64_t PrimeSieve::countTriplets   (uint64_t start, uint64_t stop);
  uint64_t PrimeSieve::countQuadruplets(uint64_t start, uint64_t stop);
  uint64_t PrimeSieve::countQuintuplets(uint64_t start, uint64_t stop);
  uint64_t PrimeSieve::countSextuplets (uint64_t start, uint64_t stop);
  uint64_t PrimeSieve::countSeptuplets (uint64_t start, uint64_t stop);

  ////////////////////////////////////////////////////////////////////
  // count_primes.cpp
  // Count the primes up to 1000.

  #include <primesieve/soe/PrimeSieve.h>
  #include <stdint.h>
  #include <iostream>

  int main()
  {
    PrimeSieve ps;
    uint64_t count = ps.countPrimes(2, 1000);
    std::cout << "Primes below 1000 = " << count << std::endl;
    return 0;
  }

  ////////////////////////////////////////////////////////////////////

4. Print primes
===============

  API for printing (to std::cout)
  -------------------------------
  void PrimeSieve::printPrimes     (uint64_t start, uint64_t stop);
  void PrimeSieve::printTwins      (uint64_t start, uint64_t stop);
  void PrimeSieve::printTriplets   (uint64_t start, uint64_t stop);
  void PrimeSieve::printQuadruplets(uint64_t start, uint64_t stop);
  void PrimeSieve::printQuintuplets(uint64_t start, uint64_t stop);
  void PrimeSieve::printSextuplets (uint64_t start, uint64_t stop);
  void PrimeSieve::printSeptuplets (uint64_t start, uint64_t stop);

  ////////////////////////////////////////////////////////////////////
  // print_twins.cpp
  // Print the twin primes up to 1000 to std::cout.
  // Program output:
  // (3, 5)
  // (5, 7)
  // ...

  #include <primesieve/soe/PrimeSieve.h>

  int main()
  {
    PrimeSieve ps;
    ps.printTwins(0, 1000);
    return 0;
  }

  ////////////////////////////////////////////////////////////////////

5. Callback primes
==================

  API for prime callback
  ----------------------
  void PrimeSieve::generatePrimes(uint32_t start, uint32_t stop, void (*callback)(uint32_t));
  void PrimeSieve::generatePrimes(uint64_t start, uint64_t stop, void (*callback)(uint64_t));
  void PrimeSieve::generatePrimes(uint64_t start, uint64_t stop, void (*callback)(uint64_t, int));

  ////////////////////////////////////////////////////////////////////
  // callback_primes.cpp
  // The callback function will be executed for each prime
  // in the interval [2, 1000].

  #include <primesieve/soe/PrimeSieve.h>
  #include <iostream>

  void callback(unsigned int prime)
  {
    std::cout << prime << ", ";
  }

  int main()
  {
    PrimeSieve ps;
    ps.generatePrimes(2, 1000, callback);
    return 0;
  }

  ////////////////////////////////////////////////////////////////////

6. Callback primes OOP
======================

  If your class is derived from PrimeSieveCallback<T> and implements a
  callback(T) method then you can pass instances of your class to one
  of the generatePrimes() methods below.

  API for oop callback
  --------------------
  void PrimeSieve::generatePrimes(uint32_t start, uint32_t stop, PrimeSieveCallback<uint32_t>*);
  void PrimeSieve::generatePrimes(uint32_t start, uint32_t stop, PrimeSieveCallback<uint64_t>*);
  void PrimeSieve::generatePrimes(uint32_t start, uint32_t stop, PrimeSieveCallback<uint64_t, int>*);

  ////////////////////////////////////////////////////////////////////
  // callback_primes_oop.cpp
  // Instances of classes that derive from PrimeSieveCallback<T>
  // can be passed to the generatePrimes() methods.

  #include <primesieve/soe/PrimeSieve.h>
  #include <primesieve/soe/PrimeSieveCallback.h>
  #include <stdint.h>
  #include <list>

  struct PrimeList : std::list<uint64_t>,
                     PrimeSieveCallback<uint64_t> {
    void callback(uint64_t prime)
    {
      this->push_back(prime);
    }
  };

  int main()
  {
    PrimeList primeList;
    PrimeSieve ps;
    ps.generatePrimes(0, 1000, &primeList);
    return 0;
  }

  ////////////////////////////////////////////////////////////////////

7. Cancel callback
==================

  PrimeSieve objects are exception safe so it is possible to throw an
  exception to cancel prime generation (callback).

  ////////////////////////////////////////////////////////////////////
  // cancel_callback.cpp
  // Cancel prime generation by throwing a stop_primesieve()
  // exception. Find the 10^7th prime.

  #include <primesieve/soe/PrimeSieve.h>
  #include <primesieve/soe/stop_primesieve.h>
  #include <iostream>

  int i = 0;
  int n = 10000000;

  void callback(unsigned int prime)
  {
    if (++i == n) {
      std::cout << n << "th prime = " << prime << std::endl;
      throw stop_primesieve();
    }
  }

  int main()
  {
    try {
      PrimeSieve ps;
      ps.generatePrimes(0, n * 50, callback);
    }
    catch (stop_primesieve&) { }
    return 0;
  }

  ////////////////////////////////////////////////////////////////////

8. ParallelPrimeSieve
=====================

  ParallelPrimeSieve uses OpenMP multi-threading to sieve primes in
  parallel, it scales well even with hundreds of CPU cores! Its main
  use is to count primes and prime k-tuplets, it can also generate
  and print primes and prime k-tuplets in parallel but only in random
  order. The ParallelPrimeSieve class is derived from PrimeSieve so it
  inherits PrimeSieve's API. The following API methods are exclusive
  to ParallelPrimeSieve:

  API
  ---
  void       ParallelPrimeSieve::setNumThreads(int);
  int        ParallelPrimeSieve::getNumThreads() const;
  static int ParallelPrimeSieve::getMaxThreads();

  Threading behavior
  ------------------
  By default ParallelPrimeSieve counts primes and prime k-tuplets
  using all available CPU cores but generates and prints primes and
  prime k-tuplets in arithmetic order using a single thread.
  To generate or print primes in parallel use setNumThreads(int).

  Example
  -------

  ////////////////////////////////////////////////////////////////////
  // parallel_count.cpp
  // Count the prime triplets within [10^14, 10^14+10^11]
  // using all CPU cores (default).

  #include <primesieve/soe/ParallelPrimeSieve.h>
  #include <stdint.h>
  #include <iostream>

  int main()
  {
    uint64_t start = (uint64_t) 1E14;
    uint64_t stop  = (uint64_t) (1E14+1E11);
    ParallelPrimeSieve pps;
    uint64_t count = pps.countTriplets(start, stop);
    std::cout << "Prime triplets in [10^14, 10^14+10^11] = " << count << std::endl;
    return 0;
  }

  ////////////////////////////////////////////////////////////////////

9. Timing
=========

  API for timing
  --------------
  double PrimeSieve::getSeconds() const;

  ////////////////////////////////////////////////////////////////////
  // timing.cpp
  // getSeconds() returns the time elapsed in seconds.

  #include <primesieve/soe/PrimeSieve.h>
  #include <iostream>

  int main()
  {
    PrimeSieve ps;
    ps.countPrimes(2, 1000000000);
    std::cout << "Time elapsed: " << ps.getSeconds() << " sec" << std::endl;
    return 0;
  }

  ////////////////////////////////////////////////////////////////////

10. Performance tuning
======================

  The best sieving performance is achieved if the sieve array fits
  into the CPU's L1 data cache (usually 32 or 64 KB) when
  sieving < 10^17. When sieving >= 10^17 a sieve size of the CPU's L2
  cache size per core (e.g. 512 KB) often performs better.
  PrimeSieve::setSieveSize(int) sets the sieve size in kilobytes,
  the default sieve size is 32 kilobytes.

  API
  ---
  void PrimeSieve::setSieveSize(int sieveSize);

  ////////////////////////////////////////////////////////////////////
  // sieve_size.cpp
  // Set a faster sieve size, for > 10^17 use L2 cache size.

  #include <primesieve/soe/PrimeSieve.h>
  #include <stdint.h>
  #include <iostream>

  int main()
  {
    uint64_t start = (uint64_t) 1E19;
    uint64_t stop  = (uint64_t) (1E19+1E10);
    PrimeSieve ps;
    ps.setSieveSize(512);
    uint64_t count = ps.countTwins(start, stop);
    std::cout << "Twin primes in [10^19, 10^19+10^10] = "<< count << std::endl;
    return 0;
  }

  ////////////////////////////////////////////////////////////////////

11. C++ Exceptions
==================

  PrimeSieve and ParallelPrimeSieve objects throw primesieve_error
  exceptions for invalid arguments like start > stop.
  primesieve_error is derived from std::runtime_error, it is defined
  in the primesieve_error.h header file.

  ////////////////////////////////////////////////////////////////////
  // primesieve_error.cpp
  // Catch primesieve_error exceptions, start must be <= stop.

  #include <primesieve/soe/PrimeSieve.h>
  #include <primesieve/soe/primesieve_error.h>
  #include <iostream>

  int main()
  {
    int start = 100;
    int stop = 0;
    try {
      PrimeSieve ps;
      ps.printPrimes(start, stop);
    }
    catch (primesieve_error& e) {
      std::cerr << "Error: " << e.what() << std::endl;
    }
    return 0;
  }

  ////////////////////////////////////////////////////////////////////

12. Flags
=========

  Flags are settings for PrimeSieve and ParallelPrimeSieve objects.
  PrimeSieve flags can be used to do multiple tasks in one go,
  e.g. count primes and twin primes and print the status in percent
  whilst sieving.

  API
  ---
  void PrimeSieve::sieve(uint64_t start, uint64_t stop, int flags);

  Flags
  -----
  PrimeSieve::COUNT_PRIMES
  PrimeSieve::COUNT_TWINS
  PrimeSieve::COUNT_TRIPLETS
  PrimeSieve::COUNT_QUADRUPLETS
  PrimeSieve::COUNT_QUINTUPLETS
  PrimeSieve::COUNT_SEXTUPLETS
  PrimeSieve::COUNT_SEPTUPLETS
  PrimeSieve::PRINT_PRIMES
  PrimeSieve::PRINT_TWINS
  PrimeSieve::PRINT_TRIPLETS
  PrimeSieve::PRINT_QUADRUPLETS
  PrimeSieve::PRINT_QUINTUPLETS
  PrimeSieve::PRINT_SEXTUPLETS
  PrimeSieve::PRINT_SEPTUPLETS
  PrimeSieve::PRINT_STATUS
  PrimeSieve::CALCULATE_STATUS

  ////////////////////////////////////////////////////////////////////
  // flags.cpp
  // Count primes and print the status whilst sieving.

  #include <primesieve/soe/PrimeSieve.h>
  #include <stdint.h>
  #include <iostream>

  int main()
  {
    PrimeSieve ps;
    int flags = ps.COUNT_PRIMES | ps.PRINT_STATUS;
    uint64_t start = 0;
    uint64_t stop  = (uint64_t) 1E11;
    ps.sieve(start, stop, flags);
    std::cout << "Primes below 10^11: " << ps.getPrimeCount() << std::endl;
    return 0;
  }

  ////////////////////////////////////////////////////////////////////
